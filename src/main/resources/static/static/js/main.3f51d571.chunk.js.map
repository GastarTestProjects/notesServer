{"version":3,"sources":["serviceWorker.ts","components/NoteItem.tsx","utils/WebUtils.tsx","components/MainComp.tsx","models/Note.tsx","models/Tag.tsx","components/Editor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","NoteItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","render","react_default","a","createElement","className","note","title","text","tags","map","t","name","join","react_router_dom","to","id","React","Component","WebUtils","callback","HTTP","get","then","resp","data","catch","err","console","log","post","axios","create","baseURL","MainComp","_React$Component","getNoteItems","state","notes","n","NoteItem_NoteItem","key","loadNotes","getNotes","newNotes","setState","componentDidMount","inherits","createClass","value","Note","user","createDate","Date","Tag","Editor","pathname","startsWith","getNoteById","params","changeTitle","e","target","changeText","changeTags","split","i","trim","saveNote","history","push","type","placeholder","onChange","onClick","bind","assertThisInitialized","ReactDOM","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f51d571.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Note from '../models/Note';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class NoteItem extends React.Component<{ note: Note }, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render = () => {\r\n        return <div>\r\n            <div className=\"note-title\">{this.props.note.title}</div>\r\n            <div className=\"note-text\">{this.props.note.text}</div>\r\n            <div className=\"note-tags\">\r\n                {this.props.note.tags.map((t) => t.name).join(\", \")}\r\n            </div>\r\n            {/* <button >Редактировать</button> */}\r\n            <Link to={\"/note/\" + this.props.note.id}>Edit</Link>\r\n        </div>\r\n    }\r\n}","import axios from 'axios';\r\nimport Note from '../models/Note'\r\n\r\nexport default class WebUtils {\r\n    private static HTTP = axios.create({baseURL: \"http://localhost:8080/\"});\r\n\r\n    public static getNotes(callback: (notes: Note[]) => void) {\r\n        WebUtils.HTTP.get(\"notes\")\r\n        .then((resp) => callback(resp.data))\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    public static getNoteById(id: string, callback: (note: Note) => void) {\r\n        WebUtils.HTTP.get(\"notes/\" + id)\r\n        .then((resp) => callback(resp.data))\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    public static saveNote(note: Note, callback?: () => void) {\r\n        WebUtils.HTTP.post(\"notes\", note)\r\n        .then(() => callback && callback())\r\n        .catch((err) => console.log(err));\r\n    }\r\n}","import React, { ReactNode } from 'react'\r\nimport Note from '../models/Note';\r\nimport NoteItem from './NoteItem';\r\nimport WebUtils from '../utils/WebUtils';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class MainComp extends React.Component<any, {notes: Note[]}> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {notes: []};\r\n    }\r\n\r\n    getNoteItems = () => {\r\n        return this.state.notes.map((n) => <NoteItem key={n.id + \"\"} note={n}></NoteItem>);\r\n    }\r\n\r\n    loadNotes = () => {\r\n        WebUtils.getNotes((newNotes) => this.setState(() => {return {notes: newNotes}}));\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.loadNotes();\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return <div>\r\n            <Link to=\"/add\" >New</Link>\r\n            {this.getNoteItems()}\r\n        </div>;\r\n    }\r\n}\r\n","import Tag from './Tag'\r\n\r\nexport default class Note {\r\n    id: number | null = null;\r\n    title = \"\";\r\n    text = \"\";\r\n    tags: Tag[] = [];\r\n    user: null = null;\r\n    createDate: Date | null = new Date(); // Поубирать null\r\n    \r\n\r\n    constructor() {\r\n        \r\n    }\r\n}","export default class Tag {\r\n    id: number | null = null;\r\n    name = \"\";\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport WebUtils from '../utils/WebUtils';\r\nimport Note from '../models/Note';\r\nimport Tag from '../models/Tag';\r\n\r\n// Может лучше сделать state таким {note: Note}\r\nexport default class Editor extends React.Component<RouteComponentProps<{ id: string }>, Note> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = new Note();\r\n        this.changeTitle = this.changeTitle.bind(this);\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.location.pathname.startsWith(\"/note/\")) {\r\n            // То же самое. bind обязателен, иначе не работает. Либо переопределить setState через лямбду\r\n            // WebUtils.getNoteById(this.props.match.params.id, this.setState.bind(this));\r\n\r\n            WebUtils.getNoteById(this.props.match.params.id, (note) => this.setState(note));\r\n        }\r\n    }\r\n\r\n    changeTitle = (e: any) => {\r\n        this.setState({ title: e.target.value });\r\n    }\r\n\r\n    changeText = (e: any) => {\r\n        // В обоих случаях пишет что target == null\r\n        // this.setState(() => { return { text: e.target.value } });\r\n        // this.setState(function() { return { text: e.target.value } });\r\n\r\n        // А так работает. Но есть ли смысл\r\n        // let tmpTarget = e.target;\r\n        // this.setState(() => { return { text: tmpTarget.value } });\r\n\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    changeTags = (e: any) => {\r\n        this.setState({ tags: e.target.value.split(\",\").map((i: any) => new Tag(i.trim())) });\r\n    }\r\n\r\n    saveNote = () => {\r\n        WebUtils.saveNote(this.state, () => this.props.history.push(\"/\"));\r\n    }\r\n\r\n    render = () => {\r\n        return <div>\r\n            <input type=\"text\" placeholder=\"Заголовок\" value={this.state.title} onChange={this.changeTitle} />\r\n            <textarea placeholder=\"Текст заметки\" value={this.state.text} onChange={this.changeText} />\r\n            <input type=\"text\" placeholder=\"Теги\" value={this.state.tags.map(i => i.name).join(\", \")}\r\n                onChange={this.changeTags} />\r\n            <button onClick={this.saveNote}>Сохранить</button>\r\n            <Link to=\"/\">Back</Link>\r\n            {console.log(this.props)}\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { MainComp } from './components/MainComp';\nimport Editor from './components/Editor';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<BrowserRouter>\n    <Route exact path=\"/\" component={MainComp} />\n    <Route exact path=\"/add\" component={Editor} />\n    <Route path=\"/note/:id\" component={Editor} />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}