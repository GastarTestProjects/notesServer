{"version":3,"sources":["serviceWorker.ts","components/NoteItem.tsx","utils/WebUtils.tsx","components/NoteList.tsx","components/MainComp.tsx","models/Note.tsx","models/Tag.tsx","components/Editor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","NoteItem","prepareDate","date","result","dTmp","Date","getDate","Number","getMonth","toLocaleString","undefined","minimumIntegerDigits","getFullYear","getHours","getMinutes","onTagClick","e","query","target","textContent","console","log","_this","props","search","render","react_default","a","createElement","Card","className","Header","Title","note","title","react_router_dom","to","id","Body","Text","text","tags","map","t","Badge","key","name","variant","onClick","createDate","modifyDate","React","Component","WebUtils","callback","HTTP","get","params","filter","then","resp","data","catch","err","post","delete","axios","create","process","REACT_APP_HOST","baseURL","NoteList","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNoteItems","state","notes","n","NoteItem_NoteItem","loadNotes","getNotes","newNotes","setState","trim","componentDidMount","componentDidUpdate","prevProps","newProps","MainComp","_React$Component","timer","clearTimeout","setTimeout","searchQuery","tmpQuery","setSearchFieldValue","onSearchChange","value","inherits","createClass","Form","Control","type","onChange","NoteList_NoteList","Note","user","Tag","Editor","isNew","getNoteById","changeTitle","changeText","changeTags","split","i","saveNote","history","push","deleteNote","Group","controlId","Label","as","rows","FormGroup","join","Button","pathname","startsWith","ReactDOM","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad0a650f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Note from \"../models/Note\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\nimport \"./css/NoteItem.css\";\r\n\r\nexport default class NoteItem extends React.Component<{ note: Note; search: (query: string) => void }, any> {\r\n\r\n    prepareDate = (date: string | null): string => {\r\n        let result = \"\";\r\n        if (date != null) {\r\n            let dTmp = new Date(date);\r\n            result =\r\n                dTmp.getDate() +\r\n                \".\" +\r\n                new Number(dTmp.getMonth()).toLocaleString(undefined, { minimumIntegerDigits: 2 }) +\r\n                \".\" +\r\n                dTmp.getFullYear() +\r\n                \" \" +\r\n                dTmp.getHours() +\r\n                \":\" +\r\n                dTmp.getMinutes();\r\n        }\r\n        return result;\r\n    };\r\n\r\n    onTagClick = (e: any) => {\r\n        const query = e.target.textContent;\r\n        console.log(query);\r\n        this.props.search(query);\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Card className=\"note-card\">\r\n                <Card.Header className=\"note-header\">\r\n                    <Card.Title className=\"note-title\">{this.props.note.title}</Card.Title>\r\n                    <Link to={\"/note/\" + this.props.note.id} className=\"note-edit-link\">\r\n                        Edit\r\n                    </Link>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Text className=\"note-text\">{this.props.note.text}</Card.Text>\r\n                    <Card.Text className=\"note-tags\">\r\n                        {this.props.note.tags.map(t => (\r\n                            <Badge key={t.name} variant=\"info\" onClick={this.onTagClick} className=\"note-tag\">\r\n                                {t.name}\r\n                            </Badge>\r\n                        ))}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {\"Создано: \" + this.prepareDate(this.props.note.createDate)}\r\n                        <br />\r\n                        {\"Последнее изменение: \" + this.prepareDate(this.props.note.modifyDate)}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    };\r\n}\r\n","import axios from \"axios\";\r\nimport Note from \"../models/Note\";\r\n\r\nexport default class WebUtils {\r\n    private static HTTP = axios.create(\r\n        process.env.REACT_APP_HOST ? { baseURL: \"http://localhost:8080/api\" } : { baseURL: \"/api\" }\r\n    );\r\n\r\n    public static getNotes(callback: (notes: Note[]) => void, query?: string) {\r\n        WebUtils.HTTP.get(\"/notes\", { params: { filter: query } })\r\n            .then(resp => callback(resp.data))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    public static getNoteById(id: string, callback: (note: Note) => void) {\r\n        WebUtils.HTTP.get(\"/notes/\" + id)\r\n            .then(resp => callback(resp.data))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    public static saveNote(note: Note, callback: () => void) {\r\n        WebUtils.HTTP.post(\"/notes\", note)\r\n            .then(callback)\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    public static deleteNote(note: Note, callback: () => void) {\r\n        WebUtils.HTTP.delete(\"/notes\", { data: [note.id] })\r\n            .then(callback)\r\n            .catch(err => console.log(err));\r\n    }\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport Note from \"../models/Note\";\r\nimport NoteItem from \"./NoteItem\";\r\nimport WebUtils from \"../utils/WebUtils\";\r\nimport \"./css/NoteList.css\"\r\n\r\ntype NoteListProps = {query: string, search: (query: string) => void}\r\nexport default class NoteList extends React.Component<NoteListProps, { notes: Note[] }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { notes: [] };\r\n    }\r\n\r\n    getNoteItems = () => {\r\n        return this.state.notes.map(n => <NoteItem key={n.id + \"\"} note={n} search={this.props.search}/>);\r\n    };\r\n\r\n    loadNotes = () => {\r\n        console.log(\"loadNotes \" + this.props.query);\r\n        WebUtils.getNotes(newNotes =>\r\n            this.setState(() => {\r\n                return { notes: newNotes };\r\n            }), this.props.query.trim() || undefined\r\n        );\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        console.log(\"didMount\");\r\n        this.loadNotes();\r\n    };\r\n\r\n\r\n    // componentWillReceiveProps лучше не использовать, он deprecated\r\n    componentDidUpdate = (prevProps: NoteListProps) => {\r\n        const newProps = this.props;\r\n        \r\n        // TODO: нужна ли вообще эта проверка?\r\n        if (newProps.query !== prevProps.query) {\r\n            console.log(\"didUpdate \");\r\n            console.log(prevProps);\r\n            console.log(newProps);\r\n            this.loadNotes();\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <div className=\"notes-list\">\r\n                {this.getNoteItems()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { ReactNode } from \"react\";\r\nimport NoteList from \"./NoteList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./css/MainComp.css\"\r\n\r\nexport class MainComp extends React.Component<any, { tmpQuery: string, searchQuery: string }> {\r\n    private timer: number | undefined;\r\n    \r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { tmpQuery: \"\", searchQuery: \"\" };\r\n    }\r\n\r\n    search = () => {\r\n        console.log(\"search\");\r\n        // Если timer не пустой, выполняет метод\r\n        this.timer && window.clearTimeout(this.timer);\r\n        this.timer = window.setTimeout(() => {\r\n            console.log(\"search2\");\r\n            this.setState({ searchQuery: this.state.tmpQuery });\r\n        }, 1000);\r\n    };\r\n\r\n    setSearchFieldValue = (query: string) => {\r\n        this.setState({tmpQuery: query});\r\n        this.search();\r\n    }\r\n\r\n    // TODO: Перерисовка NoteList вызывается на каждое изменение состояния, даже не связанное с ним!\r\n    onSearchChange = (e: any) => {\r\n        this.setState({tmpQuery: e.target.value});\r\n        this.search();\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <div className=\"main-container\">\r\n                <Form.Control type=\"text\" onChange={this.onSearchChange} value={this.state.tmpQuery}/>\r\n                <Link className=\"create-note\" to=\"/add\">\r\n                    Создать заметку\r\n                </Link>\r\n                <NoteList query={this.state.searchQuery} search={this.setSearchFieldValue} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Tag from \"./Tag\";\r\n\r\nexport default class Note {\r\n    id: number | null = null;\r\n    title = \"\";\r\n    text = \"\";\r\n    tags: Tag[] = [];\r\n    user: null = null;\r\n    createDate: string | null = null; // Поубирать null\r\n    modifyDate: string | null = null;\r\n}\r\n","export default class Tag {\r\n    // id: number | null = null;\r\n    name = \"\";\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WebUtils from \"../utils/WebUtils\";\r\nimport Note from \"../models/Note\";\r\nimport Tag from \"../models/Tag\";\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\";\r\nimport \"./css/Editor.css\"\r\n\r\n// Может лучше сделать state таким {note: Note}\r\nexport default class Editor extends React.Component<RouteComponentProps<{ id: string }>, Note> {\r\n    private isNew: boolean;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = new Note();\r\n        this.isNew = this.props.location.pathname.startsWith(\"/add\");\r\n        // this.changeTitle = this.changeTitle.bind(this); // не нужен?\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (!this.isNew) {\r\n            // То же самое. bind обязателен, иначе не работает. Либо переопределить setState через лямбду\r\n            // WebUtils.getNoteById(this.props.match.params.id, this.setState.bind(this));\r\n\r\n            WebUtils.getNoteById(this.props.match.params.id, note => this.setState(note));\r\n        }\r\n    };\r\n\r\n    changeTitle = (e: any) => {\r\n        this.setState({ title: e.target.value });\r\n    };\r\n\r\n    changeText = (e: any) => {\r\n        // В обоих случаях пишет что target == null\r\n        // this.setState(() => { return { text: e.target.value } });\r\n        // this.setState(function() { return { text: e.target.value } });\r\n\r\n        // А так работает. Но есть ли смысл\r\n        // let tmpTarget = e.target;\r\n        // this.setState(() => { return { text: tmpTarget.value } });\r\n\r\n        this.setState({ text: e.target.value });\r\n    };\r\n\r\n    changeTags = (e: any) => {\r\n        this.setState({\r\n            tags: e.target.value\r\n                .split(\",\")\r\n                // .filter((i: any) => i.trim())\r\n                .map((i: any) => new Tag(i.trim()))\r\n        });\r\n    };\r\n\r\n    saveNote = () => {\r\n        WebUtils.saveNote(this.state, () => this.props.history.push(\"/\"));\r\n    };\r\n\r\n    deleteNote = () => {\r\n        WebUtils.deleteNote(this.state, () => this.props.history.push(\"/\"));\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <Form className=\"edit-form\">\r\n                <Form.Group controlId=\"formTitle\">\r\n                    <Form.Label>Заголовок</Form.Label>\r\n                    <Form.Control type=\"text\" value={this.state.title} onChange={this.changeTitle} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formText\">\r\n                    <Form.Label>Текст заметки</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={this.state.text} onChange={this.changeText} />\r\n                </Form.Group>\r\n                <FormGroup controlId=\"formTags\">\r\n                    <Form.Label>Теги</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={this.state.tags.map(i => i.name).join(\", \")}\r\n                        onChange={this.changeTags}\r\n                    />\r\n                </FormGroup>\r\n                <Button onClick={this.saveNote} className=\"save-button\">Сохранить</Button>\r\n                {this.isNew || <Button onClick={this.deleteNote}>Удалить</Button>}\r\n                <Link className=\"back-link\" to=\"/\">Назад</Link>\r\n            </Form>\r\n        );\r\n    };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { MainComp } from './components/MainComp';\nimport Editor from './components/Editor';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<BrowserRouter>\n    <Route exact path=\"/\" component={MainComp} />\n    <Route exact path=\"/add\" component={Editor} />\n    <Route path=\"/note/:id\" component={Editor} />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}