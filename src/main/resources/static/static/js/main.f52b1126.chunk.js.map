{"version":3,"sources":["serviceWorker.ts","components/NoteItem.tsx","utils/WebUtils.tsx","components/MainComp.tsx","models/Note.tsx","models/Tag.tsx","components/Editor.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","NoteItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","prepareDate","date","result","dTmp","Date","getDate","Number","getMonth","toLocaleString","undefined","minimumIntegerDigits","getFullYear","getHours","getMinutes","render","react_default","a","createElement","Card","style","marginBottom","Header","className","Title","display","note","title","react_router_dom","to","id","position","right","Body","Text","text","tags","map","t","Badge","variant","marginRight","name","createDate","modifyDate","React","Component","WebUtils","callback","HTTP","get","then","resp","data","catch","err","console","log","post","axios","create","process","REACT_APP_HOST","baseURL","MainComp","_React$Component","getNoteItems","state","notes","n","NoteItem_NoteItem","key","loadNotes","getNotes","newNotes","setState","componentDidMount","inherits","createClass","value","width","margin","marginTop","Note","user","Tag","Editor","pathname","startsWith","getNoteById","params","changeTitle","e","target","changeText","changeTags","split","i","trim","saveNote","history","push","Form","Group","controlId","Label","Control","type","onChange","as","rows","FormGroup","join","Button","onClick","marginLeft","bind","assertThisInitialized","ReactDOM","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f52b1126.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Note from \"../models/Note\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\n\r\nexport default class NoteItem extends React.Component<{ note: Note }, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    prepareDate = (date: string | null): string => {\r\n        let result = \"\";\r\n        if (date != null) {\r\n            let dTmp = new Date(date);\r\n            result =\r\n                dTmp.getDate() +\r\n                \".\" +\r\n                new Number(dTmp.getMonth()).toLocaleString(undefined, {minimumIntegerDigits: 2}) +\r\n                \".\" +\r\n                dTmp.getFullYear() +\r\n                \" \" +\r\n                dTmp.getHours() +\r\n                \":\" +\r\n                dTmp.getMinutes();\r\n        }\r\n        return result;\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Card style={{ marginBottom: \"10px\" }}>\r\n                {/* <div className=\"note-title\">{this.props.note.title}</div>\r\n                <div className=\"note-text\">{this.props.note.text}</div>\r\n                <div className=\"note-tags\">{this.props.note.tags.map(t => t.name).join(\", \")}</div>\r\n                <div className=\"note-create-date\">{this.prepareDate(this.props.note.createDate)}</div>\r\n                <div className=\"note-modify-date\">{this.prepareDate(this.props.note.modifyDate)}</div>\r\n                <Link to={\"/note/\" + this.props.note.id}>Edit</Link> */}\r\n\r\n                <Card.Header className=\"note-title\">\r\n                    <Card.Title style={{ display: \"inline\" }}>{this.props.note.title}</Card.Title>\r\n                    <Link to={\"/note/\" + this.props.note.id} style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        Edit\r\n                    </Link>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Text className=\"note-text\">{this.props.note.text}</Card.Text>\r\n                    <Card.Text className=\"note-tags\">\r\n                        {this.props.note.tags.map(t => (\r\n                            <Badge variant=\"info\" style={{ marginRight: \"0.3rem\" }}>\r\n                                {t.name}\r\n                            </Badge>\r\n                        ))}\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {\"Создано: \" +\r\n                            this.prepareDate(this.props.note.createDate)}\r\n                            <br></br>\r\n                            {\"Последнее изменение: \" +\r\n                            this.prepareDate(this.props.note.modifyDate)}\r\n                    </Card.Text>\r\n                    {/* <Card.Text>{\"Дата редактирования: \" + this.prepareDate(this.props.note.modifyDate)}</Card.Text> */}\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    };\r\n}\r\n","import axios from \"axios\";\r\nimport Note from \"../models/Note\";\r\n\r\nexport default class WebUtils {\r\n    private static HTTP = axios.create(process.env.REACT_APP_HOST ? { baseURL: \"http://localhost:8080/\" } : undefined);\r\n\r\n    public static getNotes(callback: (notes: Note[]) => void) {\r\n        WebUtils.HTTP.get(\"/notes\")\r\n            .then(resp => callback(resp.data))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    public static getNoteById(id: string, callback: (note: Note) => void) {\r\n        WebUtils.HTTP.get(\"/notes/\" + id)\r\n            .then(resp => callback(resp.data))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    public static saveNote(note: Note, callback?: () => void) {\r\n        WebUtils.HTTP.post(\"/notes\", note)\r\n            .then(() => callback && callback())\r\n            .catch(err => console.log(err));\r\n    }\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport Note from \"../models/Note\";\r\nimport NoteItem from \"./NoteItem\";\r\nimport WebUtils from \"../utils/WebUtils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport class MainComp extends React.Component<any, { notes: Note[] }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { notes: [] };\r\n    }\r\n\r\n    getNoteItems = () => {\r\n        return this.state.notes.map(n => <NoteItem key={n.id + \"\"} note={n} />);\r\n    };\r\n\r\n    loadNotes = () => {\r\n        WebUtils.getNotes(newNotes =>\r\n            this.setState(() => {\r\n                return { notes: newNotes };\r\n            })\r\n        );\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.loadNotes();\r\n    };\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <div style={{ width: \"70%\", margin: \"auto\", marginTop: \"1rem\" }}>\r\n                <Link style={{ marginBottom: \"1rem\", display: \"block\" }} to=\"/add\">\r\n                    Создать заметку\r\n                </Link>\r\n                {this.getNoteItems()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Tag from \"./Tag\";\r\n\r\nexport default class Note {\r\n    id: number | null = null;\r\n    title = \"\";\r\n    text = \"\";\r\n    tags: Tag[] = [];\r\n    user: null = null;\r\n    createDate: string | null = null; // Поубирать null\r\n    modifyDate: string | null = null;\r\n\r\n    constructor() {}\r\n}\r\n","export default class Tag {\r\n    // id: number | null = null;\r\n    name = \"\";\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WebUtils from \"../utils/WebUtils\";\r\nimport Note from \"../models/Note\";\r\nimport Tag from \"../models/Tag\";\r\nimport { Form, Button, FormGroup } from \"react-bootstrap\";\r\n\r\n// Может лучше сделать state таким {note: Note}\r\nexport default class Editor extends React.Component<RouteComponentProps<{ id: string }>, Note> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = new Note();\r\n        this.changeTitle = this.changeTitle.bind(this);\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if (this.props.location.pathname.startsWith(\"/note/\")) {\r\n            // То же самое. bind обязателен, иначе не работает. Либо переопределить setState через лямбду\r\n            // WebUtils.getNoteById(this.props.match.params.id, this.setState.bind(this));\r\n\r\n            WebUtils.getNoteById(this.props.match.params.id, note => this.setState(note));\r\n        }\r\n    };\r\n\r\n    changeTitle = (e: any) => {\r\n        this.setState({ title: e.target.value });\r\n    };\r\n\r\n    changeText = (e: any) => {\r\n        // В обоих случаях пишет что target == null\r\n        // this.setState(() => { return { text: e.target.value } });\r\n        // this.setState(function() { return { text: e.target.value } });\r\n\r\n        // А так работает. Но есть ли смысл\r\n        // let tmpTarget = e.target;\r\n        // this.setState(() => { return { text: tmpTarget.value } });\r\n\r\n        this.setState({ text: e.target.value });\r\n    };\r\n\r\n    changeTags = (e: any) => {\r\n        this.setState({\r\n            tags: e.target.value\r\n                .split(\",\")\r\n                // .filter((i: any) => i.trim())\r\n                .map((i: any) => new Tag(i.trim()))\r\n        });\r\n    };\r\n\r\n    saveNote = () => {\r\n        WebUtils.saveNote(this.state, () => this.props.history.push(\"/\"));\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            // <div>\r\n            //     <input type=\"text\" placeholder=\"Заголовок\" value={this.state.title} onChange={this.changeTitle} />\r\n            //     <textarea placeholder=\"Текст заметки\" value={this.state.text} onChange={this.changeText} />\r\n            //     <input\r\n            //         type=\"text\"\r\n            //         placeholder=\"Теги\"\r\n            //         value={this.state.tags.map(i => i.name).join(\", \")}\r\n            //         onChange={this.changeTags}\r\n            //     />\r\n            //     <button onClick={this.saveNote}>Сохранить</button>\r\n            //     <Link to=\"/\">Back</Link>\r\n            //     {console.log(this.props)}\r\n            // </div>\r\n            <Form style={{ width: \"70%\", margin: \"auto\", marginTop: \"1rem\" }}>\r\n                <Form.Group controlId=\"formTitle\">\r\n                    <Form.Label>Заголовок</Form.Label>\r\n                    <Form.Control type=\"text\" value={this.state.title} onChange={this.changeTitle} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formText\">\r\n                    <Form.Label>Текст заметки</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={this.state.text} onChange={this.changeText} />\r\n                </Form.Group>\r\n                <FormGroup controlId=\"formTags\">\r\n                    <Form.Label>Теги</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={this.state.tags.map(i => i.name).join(\", \")}\r\n                        onChange={this.changeTags}\r\n                    />\r\n                </FormGroup>\r\n                <Button onClick={this.saveNote}>Сохранить</Button>\r\n                <Link style={{marginLeft: \"20px\"}} to=\"/\">Назад</Link>\r\n            </Form>\r\n        );\r\n    };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { MainComp } from './components/MainComp';\nimport Editor from './components/Editor';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<BrowserRouter>\n    <Route exact path=\"/\" component={MainComp} />\n    <Route exact path=\"/add\" component={Editor} />\n    <Route path=\"/note/:id\" component={Editor} />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}